service: pioneers-application-tracker
frameworkVersion: '3'
useDotenv: true

package:
  individually: True
  
custom:
  STAGE: ${opt:stage}
  REGION: ${env:REGION}
  DEPLOYMENT_BUCKET: ${env:DEPLOYMENT_BUCKET}
  ACCOUNT_ID: ${AWS::AccountId}
  PREFIX: ${self:service}-${self:custom.STAGE}
  LAYER_PREFIX: ${param:LAYER_PREFIX}
  AUTHORIZER_ARN: ${param:AUTHORIZER_ARN}

plugins:
  - serverless-deployment-bucket
  - serverless-latest-layer-version

provider:
  name: aws
  stage: ${self:custom.STAGE}
  region: ${self:custom.REGION}
  deploymentBucket:
    name: ${self:custom.DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256
  runtime: python3.9
  environment:
    APPLICATION_TRACKER_TABLE_NAME: !Ref ApplicationTrackerTable

# todo rename api urls
functions:

  create-card:
    handler: handlers/application_card/create_card.lambda_handler
    layers:
      - arn:aws:lambda:${self:custom.REGION}:#{AWS::AccountId}:layer:${self:custom.LAYER_PREFIX}-common:latest
    package:
      exclude:
      - "./**"
      include:
      - "handlers/application_card/create_card.py"
    timeout: 30
    role: !GetAtt LambdaRole.Arn
    events:
      - http:
          path: user/{user_id}/job
          method: POST
#          authorizer:
#            arn: ${self:custom.AUTHORIZER_ARN}
#            resultTtlInSeconds: 0
#            identitySource: method.request.header.Authorization
#            type: token
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: true

  edit-card:
    handler: handlers/application_card/edit_card.lambda_handler
    layers:
      - arn:aws:lambda:${self:custom.REGION}:#{AWS::AccountId}:layer:${self:custom.LAYER_PREFIX}-common:latest
    package:
      exclude:
      - "./**"
      include:
      - "handlers/application_card/edit_card.py"
    timeout: 30
    role: !GetAtt LambdaRole.Arn
    events:
      - http:
          path: user/{user_id}/job/{job_id}
          method: PUT
#          authorizer:
#            arn: ${self:custom.AUTHORIZER_ARN}
#            resultTtlInSeconds: 0
#            identitySource: method.request.header.Authorization
#            type: token
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: true
  
  delete-card:
    handler: handlers/application_card/delete_card.lambda_handler
    layers:
      - arn:aws:lambda:${self:custom.REGION}:#{AWS::AccountId}:layer:${self:custom.LAYER_PREFIX}-common:latest
    package:
      exclude:
      - "./**"
      include:
      - "handlers/application_card/delete_card.py"
    timeout: 30
    role: !GetAtt LambdaRole.Arn
    events:
      - http:
          path: user/{user_id}/job/{job_id}
          method: DELETE
#          authorizer:
#            arn: ${self:custom.AUTHORIZER_ARN}
#            resultTtlInSeconds: 0
#            identitySource: method.request.header.Authorization
#            type: token
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: true

  get-card:
    handler: handlers/application_card/get_card.lambda_handler
    layers:
      - arn:aws:lambda:${self:custom.REGION}:#{AWS::AccountId}:layer:${self:custom.LAYER_PREFIX}-common:latest
    package:
      exclude:
      - "./**"
      include:
      - "handlers/application_card/get_card.py"
    timeout: 30
    role: !GetAtt LambdaRole.Arn
    events:
      - http:
          path: user/{user_id}/job/{job_id}
          method: GET
#          authorizer:
#            arn: ${self:custom.AUTHORIZER_ARN}
#            resultTtlInSeconds: 0
#            identitySource: method.request.header.Authorization
#            type: token
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: true

  list-card:
    handler: handlers/application_card/list_card.lambda_handler
    layers:
      - arn:aws:lambda:${self:custom.REGION}:#{AWS::AccountId}:layer:${self:custom.LAYER_PREFIX}-common:latest
    package:
      exclude:
      - "./**"
      include:
      - "handlers/application_card/list_card.py"
    timeout: 30
    role: !GetAtt LambdaRole.Arn
    events:
      - http:
          path: user/{user_id}/job
          method: GET
#          authorizer:
#            arn: ${self:custom.AUTHORIZER_ARN}
#            resultTtlInSeconds: 0
#            identitySource: method.request.header.Authorization
#            type: token
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: true

resources:
  Resources:
    ApplicationTrackerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: application_tracker_cards
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: created_time_epoch
            AttributeType: N
        KeySchema: 
          - AttributeName: id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: user_id_created_time_epoch_index
            KeySchema: 
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: created_time_epoch
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    LambdaRole:
      Type: AWS::IAM::Role        
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
              -   Effect: Allow
                  Principal:
                      Service:
                      - lambda.amazonaws.com
                  Action:
                  - sts:AssumeRole
        Path: "/"
        RoleName: ${self:custom.PREFIX}-role
        Policies:
          - PolicyName: ${self:custom.PREFIX}-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -   Effect: Allow
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: '*'
                -   Effect: Allow
                    Action:
                    - dynamodb:GetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                    - dynamodb:PutItem
                    - dynamodb:BatchWriteItem
                    Resource: 
                    - !GetAtt ApplicationTrackerTable.Arn
                    - !Sub "${ApplicationTrackerTable.Arn}/*"